type ComponentsRegistry @entity {
    # ComponentsRegistry contract address.
    id: ID!

    # Total number of transactions across indicators, comparators, and instances.
    txCount: Int!

    # Tracks number of indicators, comparators, and instances in existence.
    comparatorCount: Int!
    indicatorCount: Int!
    comparatorInstanceCount: Int!
    indicatorInstanceCount: Int!

    # Tracks instance purchases.
    numberOfIndicatorInstancePurchases: Int!
    numberOfComparatorInstancePurchases: Int!

    # Measured in the protocol's governance token.
    totalVolume: BigInt!
    indicatorVolume: BigInt!
    comparatorVolume: BigInt!
    indicatorInstanceVolume: BigInt!
    comparatorInstanceVolume: BigInt!    
}

type TradingBotRegistry @entity {
    # TradingBotRegistry contract address.
    id: ID!

    # Number of minted NFTs.
    # Not all trading bots are published to the platform.
    numberOfTradingBotNFTs: Int!

    # Number of trading bots published to the platform.
    # Prospective trading bots are reviewed manually before being published to the platform.
    numberOfPublishedTradingBots: Int!

    # Measured in the protocol's governance token.
    collectedFees: BigInt!   
}

type Indicator @entity {
    # Component ID in ComponentsRegistry.
    id: ID!

    # Timestamp at which the indicator was created.
    publishedOn: BigInt!

    # User who developed this indicator.
    # Initially the indicator owner.
    developer: User!

    # Address of this indicator's ComponentInstances contract.
    instancesAddress: String!

    # Address of the indicator contract.
    contractAddress: String!

    # User who currently owns the indicator NFT.
    componentOwner: User!

    # Measured in the protocol's governance token.
    fee: BigInt!
    collectedFees: BigInt!

    # Instances associated with this indicator.
    instances: [IndicatorInstance]! @derivedFrom(field: "indicator")
}

type Comparator @entity {
    # Component ID in ComponentsRegistry.
    id: ID!

    # Timestamp at which the comparator was created.
    publishedOn: BigInt!

    # User who developed this comparator.
    # Initially the indicator owner.
    developer: User!

    # Address of this comparator's ComponentInstances contract.
    instancesAddress: String!

    # Address of the comparator contract.
    contractAddress: String!

    # User who currently owns the comparator NFT.
    componentOwner: User!

    # Measured in the protocol's governance token.
    fee: BigInt!
    collectedFees: BigInt!

    # Instances associated with this comparator.
    instances: [ComparatorInstance]! @derivedFrom(field: "comparator")
}

type IndicatorInstance @entity {
    # Component ID + "-" + instance ID.
    id: ID!

    # Timestamp at which the indicator instance was created.
    createdOn: BigInt!

    # ID in the indicator's ComponentInstances contract.
    instanceID: BigInt!

    # ID of the parent Indicator in the Components contract.
    componentID: BigInt!

    # Reference to the parent Indicator.
    indicator: Indicator!

    # Measured in the protocol's governance token.
    # Price user pays for integrating this indicator instance in a comparator instance.
    price: BigInt!

    # Whether this indicator instance is a default instance.
    # If true, users don't have to pay a fee to integrate this instance.
    isDefault: Boolean!

    # User who currently owns the indicator instance NFT.
    instanceOwner: User!

    # User who developed this indicator instance.
    # Initially the indicator instance owner.
    developer: User!

    # Asset symbol.
    # Ex) BTC.
    asset: String!

    # Timeframe (in minutes) of the asset's data feed.
    assetTimeframe: BigInt!

    # Timeframe (in minutes) of the indicator instance.
    # Keeps track of how frequently the indicator instance is expected to be updated.
    indicatorTimeframe: BigInt!

    # Optional params.
    # Ex) The EMA indicator might have [20] as params to define 20-period moving average.
    params: String!

    # Measured in the protocol's governance token.
    collectedFees: BigInt!

    # Comparator instances that use this indicator instance.
    integrations1: [ComparatorInstance]! @derivedFrom(field: "indicator1")
    integrations2: [ComparatorInstance]! @derivedFrom(field: "indicator2")
}

type ComparatorInstance @entity {
    # Component ID + "-" + instance ID.
    id: ID!

    # Timestamp at which the comparator instance was created.
    createdOn: BigInt!

    # ID in the comparator's ComponentInstances contract.
    instanceID: BigInt!

    # ID of the parent Comparator in the Components contract.
    componentID: BigInt!

    # Reference to the parent Comparator entity.
    comparator: Comparator!

    # Reference to the two Indicator entities.
    indicator1: IndicatorInstance!
    indicator2: IndicatorInstance!

    # Measured in the protocol's governance token.
    # Price user pays for integrating this comparator instance in in a trading bot.
    price: BigInt!

    # Whether this comparator instance is a default instance.
    # If true, users don't have to pay a fee to integrate this instance.
    isDefault: Boolean!

    # User who currently owns the comparator instance NFT.
    instanceOwner: User!

    # User who developed this comparator instance.
    # Initially the comparator instance owner.
    developer: User!

    # Timeframe (in minutes) of the comparator instance.
    # Keeps track of how frequently the comparator instance is expected to be updated.
    # Fetched from contract.
    comparatorTimeframe: BigInt!

    # Measured in the protocol's governance token.
    collectedFees: BigInt!
}

type PurchaseComponentInstance @entity {
    # Transaction hash.
    id: ID!

    # ID of the parent Indicator/Comparator in the Components contract.
    componentID: BigInt!

    # ID in the indicator's/comparator's ComponentInstances contract.
    instanceID: BigInt!

    # Address of the buyer.
    buyer: String!

    # Address of the indicator/comparator instance owner.
    owner: String!

    # Measured in the protocol's governance token.
    price: BigInt!

    # Timestamp at which the transaction occurred.
    timestamp: BigInt!
}

type User @entity {
    # User's wallet address.
    id: ID!

    # Measured in the protocol's governance token.
    totalCollectedFees: BigInt!
    totalFeesPaid: BigInt!

    # Tracks entities owned/developed by this user.
    indicatorsOwned: [Indicator]! @derivedFrom(field: "componentOwner")
    comparatorsOwned: [Comparator]! @derivedFrom(field: "componentOwner")
    indicatorInstancesOwned: [IndicatorInstance]! @derivedFrom(field: "instanceOwner")
    comparatorInstancesOwned: [ComparatorInstance]! @derivedFrom(field: "instanceOwner")
    tradingBotsOwned: [TradingBot]! @derivedFrom(field: "owner")
    indicatorsDeveloped: [Indicator]! @derivedFrom(field: "developer")
    comparatorsDeveloped: [Comparator]! @derivedFrom(field: "developer")
    indicatorInstancesDeveloped: [IndicatorInstance]! @derivedFrom(field: "developer")
    comparatorInstancesDeveloped: [ComparatorInstance]! @derivedFrom(field: "developer")
    tradingBotsDeveloped: [TradingBot]! @derivedFrom(field: "developer")

    # Tracks indicator/comparator instances that this user has purchased.
    purchasedIndicatorInstances: [IndicatorInstance]!
    purchasedComparatorInstances: [ComparatorInstance]!
}

type TradingBot @entity {
    # Trading bot ID from TradingBotRegistry.
    id: ID!

    # 1 = staged.
    # 2 = created contract.
    # 3 = initialized.
    # 4 = set rules.
    # 5 = minted NFT.
    # 6 = published.
    status: Int!

    # Address of the TradingBot contract.
    contractAddress: String!

    # Timestamp at which the trading bot was created.
    createdOn: BigInt!

    # User who currently owns the trading bot NFT.
    owner: User!

    # User who developed this trading bot.
    # Initially the trading bot NFT owner.
    developer: User!

    # Address of user/contract that can update the trading bot's params.
    operator: String!

    # Address of the trading bot's dedicated keeper contract.
    keeper: String!

    # Address of the trading bot's data feed.
    dataFeed: String!

    # Name of the trading bot.
    name: String!

    # Symbol of the trading bot.
    symbol: String!

    # Timeframe (in minutes) of the trading bot.
    # Keeps track of how frequently the trading bot is expected to be updated.
    tradingBotTimeframe: BigInt!

    # Maximum multiple of the timeframe before a trade is exited automatically.
    maxTradeDuration: BigInt!

    # Denominated in 10000.
    profitTarget: BigInt!
    stopLoss: BigInt!

    # Asset symbol.
    # Ex) BTC.
    tradedAsset: String!

    # Timeframe (in minutes) of the asset's data feed.
    assetTimeframe: BigInt!

    # Measured in the protocol's governance token.
    # Fee that developers pay whenever they request data from the trading bot's data feed.
    usageFee: BigInt!

    # Associated ComparatorInstances used for entry criteria.
    entryRules: [ComparatorInstance]!

    # Associated ComparatorInstances used for exit criteria.
    exitRules: [ComparatorInstance]!
}

# Data accumulated and condensed into day stats for ComponentsRegistry.
type ComponentsRegistryDayData @entity {
    # Timestamp rounded to current day by dividing by 86400.
    id: ID! 
    date: Int!

    # Tracks volume across entites.
    dailyCombinedVolume: BigInt!
    dailyIndicatorVolume: BigInt!
    dailyComparatorVolume: BigInt!
    dailyIndicatorInstanceVolume: BigInt!
    dailyComparatorInstanceVolume: BigInt!
    totalCombinedVolume: BigInt!
    totalIndicatorVolume: BigInt!
    totalComparatorVolume: BigInt!
    totalIndicatorInstanceVolume: BigInt!
    totalComparatorInstanceVolume: BigInt!

    # Tracks creations/purchases of indicator/comparator instances.
    dailyIndicatorInstancesCreated: Int!
    dailyComparatorInstancesCreated: Int!
    dailyIndicatorInstancesPurchased: Int!
    dailyComparatorInstancesPurchased: Int!

    # Number of transactions for this day.
    txCount: Int!
}

# Data accumulated and condensed into day stats for TradingBotRegistry.
type TradingBotRegistryDayData @entity {
    # Timestamp rounded to current day by dividing by 86400.
    id: ID! 
    date: Int!

    # Measured in the protocol's governance token.
    dailyCollectedFees: BigInt!
    totalCollectedFees: BigInt!

    dailyMintedTradingBotNFTs: Int!
    dailyPublishedTradingBots: Int!
}

type ComponentInstancesLookup @entity {
    # ComponentInstances contract address.
    id: ID!

    componentID: BigInt!
}